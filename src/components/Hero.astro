---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro:assets";
import heroDefaultImage from "../assets/hero-service.png";

type ImageSource = string | ImageMetadata;

const isImageMetadata = (value: ImageSource): value is ImageMetadata =>
  typeof value === "object" && value !== null && "src" in value && "width" in value && "height" in value;

export interface Props {
  title?: string;
  description?: string;
  cta?: {
    label: string;
    href: string;
  };
  imageSrc?: ImageSource;
  mobileImageSrc?: ImageSource;
  showMobileImage?: boolean;
  backgroundClass?: string;
  className?: string;
}

const {
  title = "Schnelle & verständliche IT-Hilfe in München",
  description = "Wir lösen Ihre Computerprobleme direkt bei Ihnen vor Ort oder per Fernwartung – verständlich und zuverlässig.",
  cta = {
    label: "Jetzt kostenloses Erstgespräch buchen",
    href: "/kontakt",
  },
  imageSrc = heroDefaultImage as ImageSource,
  mobileImageSrc,
  showMobileImage = true,
  backgroundClass = "bg-[#E8F0FF]",
  className = "",
}: Props = Astro.props;

const hasCTA = Boolean(cta?.label && cta?.href);
const resolvedMobileImage = mobileImageSrc ?? imageSrc;
const showImageOnMobile = showMobileImage && Boolean(resolvedMobileImage);
const showImageOnDesktop = Boolean(imageSrc);
---

<section
  class={`relative overflow-hidden pt-24 pb-10 md:pt-32 md:pb-14 lg:pt-16 lg:pb-16 ${backgroundClass} ${className}`}
>
  <div
    class="relative mx-auto flex w-full max-w-6xl flex-col gap-10 px-6 text-text md:px-8 lg:flex-row lg:items-center"
  >
    {showImageOnMobile && (
      <div
        class="pointer-events-none absolute inset-0 flex items-start justify-center overflow-hidden lg:hidden"
        aria-hidden="true"
      >
        {isImageMetadata(resolvedMobileImage) ? (
          <Image
            src={resolvedMobileImage}
            alt=""
            class="h-full w-full object-cover object-top"
            loading="lazy"
            decoding="async"
            sizes="100vw"
            widths={[480, 640, 768, 896, 1024]}
            loading="eager"
          />
        ) : (
          <img
            src={resolvedMobileImage}
            alt=""
            class="h-full w-full object-cover object-top"
            loading="eager"
            decoding="async"
          />
        )}
        <div class="absolute inset-0 bg-gradient-to-b from-[#E8F0FF]/90 via-[#E8F0FF]/75 to-[#E8F0FF]" />
      </div>
    )}

    <div class="relative z-10 mt-20 max-w-2xl text-center md:mt-28 md:text-left lg:mt-0 lg:py-16 xl:py-20">
      <h1 class="text-4xl font-semibold md:text-[3.25rem] md:leading-tight">
        {title}
      </h1>
      {description && (
        <p class="mt-6 text-lg text-text/80 md:text-xl md:leading-relaxed">
          {description}
        </p>
      )}
      {hasCTA && (
        <div class="mt-10">
          <a href={cta.href} class="btn-primary px-8 py-3 text-base md:text-lg">
            {cta.label}
          </a>
        </div>
      )}
    </div>

    {showImageOnDesktop && (
      <div
        class="pointer-events-none absolute inset-0 hidden items-center justify-end overflow-hidden lg:flex"
        aria-hidden="true"
      >
        {isImageMetadata(imageSrc) ? (
          <Image
            src={imageSrc}
            alt=""
            class="h-full w-full max-w-none object-contain object-right"
            loading="eager"
            decoding="async"
            sizes="(min-width: 1280px) 50vw, 100vw"
            widths={[640, 768, 1024, 1280, 1536]}
          />
        ) : (
          <img
            src={imageSrc}
            alt=""
            class="h-full w-full max-w-none object-contain object-right"
            loading="eager"
            decoding="async"
          />
        )}
        <div class="absolute inset-0 bg-gradient-to-r from-[#E8F0FF]/95 via-[#E8F0FF]/40 to-transparent" />
      </div>
    )}
  </div>
</section>
